import{p as n,M as p,H as i}from"./app-BArZ-JoB.js";function C(){const d=n({data:[]}),l=n({}),o=n({}),e=n(!1),s=p(),u=async()=>{e.value=!0;try{const r=await i.get("/api/admin/listas");d.value=r.data,e.value=!1}catch{e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al cargar las listas de reproducción",life:3e3})}};return{listas:d,lista:l,errors:o,loading:e,getListas:u,getLista:async r=>{e.value=!0;try{const t=await i.get(`/api/admin/listas/${r}`);return l.value=t.data.data,e.value=!1,l.value}catch(t){throw e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al cargar los detalles de la lista",life:3e3}),t}},storeLista:async r=>{e.value=!0,o.value={};const t=new FormData;for(const a in r)a==="portada"&&r[a]instanceof File,t.append(a,r[a]);try{const a=await i.post("/api/admin/listas",t,{headers:{"Content-Type":"multipart/form-data"}});return l.value=a.data.lista,e.value=!1,s.add({severity:"success",summary:"Éxito",detail:"Lista de reproducción creada correctamente",life:3e3}),a}catch(a){throw a.response&&a.response.status===422&&(o.value=a.response.data.errors),e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al crear la lista de reproducción",life:3e3}),a}},updateLista:async(r,t)=>{e.value=!0,o.value={};try{const a=await i.put(`/api/admin/listas/${r}`,t);return l.value=a.data.data,e.value=!1,a}catch(a){throw a.response&&a.response.status===422&&(o.value=a.response.data.errors),e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al actualizar la lista de reproducción",life:3e3}),a}},deleteLista:async r=>{e.value=!0;try{await i.delete(`/api/admin/listas/${r}`),u(),e.value=!1,s.add({severity:"success",summary:"Éxito",detail:"Lista de reproducción eliminada correctamente",life:3e3})}catch(t){throw e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al eliminar la lista de reproducción",life:3e3}),t}},getCancionesLista:async r=>{e.value=!0;try{const t=await i.get(`/api/listas/${r}/canciones`);return e.value=!1,t.data.data}catch(t){throw e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al cargar las canciones de la lista",life:3e3}),t}},eliminarCancionDeLista:async(r,t)=>{e.value=!0;try{return await i.delete(`/api/listas/${r}/cancion/${t}`),e.value=!1,!0}catch(a){throw e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al eliminar la canción de la lista",life:3e3}),a}},updatePortada:async(r,t)=>{e.value=!0;const a=new FormData;a.append("id",r),a.append("picture",t);try{const c=await i.post("/api/listas/updateimg",a,{headers:{"Content-Type":"multipart/form-data"}});return e.value=!1,c.data}catch(c){throw e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al actualizar la portada",life:3e3}),c}},añadirCancionALista:async(r,t)=>{e.value=!0;try{const a=await i.post("/api/listas/añadirCancion",{lista_ids:[r],cancion_id:t});return e.value=!1,a.data}catch(a){throw e.value=!1,s.add({severity:"error",summary:"Error",detail:"Error al añadir la canción a la lista",life:3e3}),a}}}}export{C as u};
